name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Build for multiple platforms
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Building version: $VERSION"
          
          mkdir -p release
          
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )
          
          for platform in "${platforms[@]}"; do
            IFS='/' read -r os arch <<< "$platform"
            
            if [ "$os" = "windows" ]; then
              output_name="auto-upnp-${os}-${arch}.exe"
            else
              output_name="auto-upnp-${os}-${arch}"
            fi
            
            echo "Building for $os/$arch..."
            
            COMMIT=$(git rev-parse --short HEAD)
            DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            
            CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build \
              -a -installsuffix cgo \
              -ldflags "-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -extldflags '-static'" \
              -o "release/$output_name" \
              cmd/main.go
            
            if [ -f "release/$output_name" ]; then
              echo "✓ Built: release/$output_name"
              ls -lh "release/$output_name"
            else
              echo "✗ Failed to build: release/$output_name"
              exit 1
            fi
          done
          
          cp install.sh release/install.sh
          chmod +x release/install.sh
          cp config.yaml release/config.yaml.example

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
          body: |
            ## 自动UPnP服务 Release
            
            ### 快速安装
            ```bash
            # 下载并运行安装脚本
            curl -fsSL https://raw.githubusercontent.com/javen-yan/auto-upnp/main/install.sh | sudo bash
            ```
            
            ### 平台支持
            - Linux (amd64, arm64)
            - macOS (amd64, arm64)
            - Windows (amd64)

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/auto-upnp-linux-amd64
          asset_name: auto-upnp-linux-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Linux ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/auto-upnp-linux-arm64
          asset_name: auto-upnp-linux-arm64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Darwin AMD64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/auto-upnp-darwin-amd64
          asset_name: auto-upnp-darwin-amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Darwin ARM64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/auto-upnp-darwin-arm64
          asset_name: auto-upnp-darwin-arm64
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Windows AMD64
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/auto-upnp-windows-amd64.exe
          asset_name: auto-upnp-windows-amd64.exe
          asset_content_type: application/octet-stream

      - name: Upload Release Assets - Install Script
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/install.sh
          asset_name: install.sh
          asset_content_type: text/x-shellscript

      - name: Upload Release Assets - Config Example
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release/config.yaml.example
          asset_name: config.yaml.example
          asset_content_type: text/yaml 
