name: Release

on:
  push:
    tags:
      - 'v*' # 推送v开头的tag时触发

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true

      - name: Debug environment
        run: |
          echo "Go version:"
          go version
          echo "Go env:"
          go env
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
          echo "Go module info:"
          go mod download
          go mod verify

      - name: Build for multiple platforms
        run: |
          # 设置版本信息
          VERSION=${GITHUB_REF#refs/tags/}
          echo "Building version: $VERSION"
          
          # 创建发布目录
          mkdir -p release
          
          # 构建多个平台的静态二进制文件
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )
          
          for platform in "${platforms[@]}"; do
            IFS='/' read -r os arch <<< "$platform"
            
            # 设置输出文件名
            if [ "$os" = "windows" ]; then
              output_name="auto-upnp-${os}-${arch}.exe"
            else
              output_name="auto-upnp-${os}-${arch}"
            fi
            
            echo "Building for $os/$arch..."
            
            # 获取提交信息
            COMMIT=$(git rev-parse --short HEAD)
            DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            
            # 构建静态二进制文件
            CGO_ENABLED=0 GOOS=$os GOARCH=$arch go build \
              -a -installsuffix cgo \
              -ldflags "-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -extldflags '-static'" \
              -o "release/$output_name" \
              cmd/main.go
            
            # 验证构建结果
            if [ -f "release/$output_name" ]; then
              echo "✓ Built: release/$output_name"
              # 显示文件大小
              ls -lh "release/$output_name"
            else
              echo "✗ Failed to build: release/$output_name"
              exit 1
            fi
          done
          
          # 创建安装脚本的副本
          cp install.sh release/install.sh
          chmod +x release/install.sh
          
          # 创建配置文件示例
          cp config.yaml release/config.yaml.example
          
          # 创建README
          cat > release/README.md << 'EOF'
# 自动UPnP服务 Release

## 快速安装

### Linux (推荐)
```bash
# 下载并运行安装脚本
curl -fsSL https://raw.githubusercontent.com/javen-yan/auto-upnp/main/install.sh | sudo bash
```

### 手动安装
1. 下载对应平台的二进制文件
2. 重命名为 `auto-upnp`
3. 设置执行权限: `chmod +x auto-upnp`
4. 复制配置文件: `cp config.yaml.example config.yaml`
5. 编辑配置文件: `nano config.yaml`
6. 运行: `./auto-upnp -config config.yaml`

## 平台支持
- Linux (amd64, arm64)
- macOS (amd64, arm64)
- Windows (amd64)

## 配置文件
请参考 `config.yaml.example` 文件进行配置。
EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release/auto-upnp-linux-amd64
            release/auto-upnp-linux-arm64
            release/auto-upnp-darwin-amd64
            release/auto-upnp-darwin-arm64
            release/auto-upnp-windows-amd64.exe
            release/install.sh
            release/config.yaml.example
            release/README.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 